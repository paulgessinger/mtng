[
  {
    "title": "TrackAtVertex trackWeight is not being written in IVF",
    "user": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2149",
    "number": 2149,
    "assignee": null,
    "body": "During my work on the vertexing I noticed that the `trackWeight` of `TrackAtVertex` https://github.com/acts-project/acts/blob/main/Core/include/Acts/Vertexing/TrackAtVertex.hpp#L69 default of `1` is never being overwritten in the IVF. Not sure if this is intended but it seems very odd.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2149",
    "updated_at": "2023-06-23T17:37:46+00:00",
    "created_at": "2023-05-24T16:54:30+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "refactor: add geohook for fast digitization range selection to itk example",
    "user": {
      "login": "niermann999",
      "html_url": "https://github.com/niermann999"
    },
    "labels": [
      {
        "name": ":construction: WIP"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/pull/2089",
    "number": 2089,
    "assignee": null,
    "body": "Adds a geoidhook to the ```itk.py``` example that performs the matching of geometric digitization configurations to detector regions. The json config file was adjusted accordingly and will be pushed to the acts itk repository once validated again.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2089",
    "updated_at": "2023-06-04T10:28:19+00:00",
    "created_at": "2023-05-05T09:28:54+00:00",
    "closed_at": null,
    "is_wip": true,
    "is_stale": true,
    "pull_request": {
      "url": "https://api.github.com/repos/acts-project/acts/pulls/2089",
      "html_url": "https://github.com/acts-project/acts/pull/2089",
      "diff_url": "https://github.com/acts-project/acts/pull/2089.diff",
      "patch_url": "https://github.com/acts-project/acts/pull/2089.patch",
      "merged_at": null
    }
  },
  {
    "title": "Track nDoF only returns the sum of calibrated size and not the actual DoFs.",
    "user": {
      "login": "pbutti",
      "html_url": "https://github.com/pbutti"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2076",
    "number": 2076,
    "assignee": null,
    "body": "I think that the computation of the DoF of a track is wrong.\r\nAt the moment it is returning just the sum of the calibrated size. \r\nhttps://github.com/acts-project/acts/blob/main/Core/include/Acts/EventData/TrackHelpers.hpp#L46\r\nI think shouldbe NDoF=(sum of calibrated size) - fit parameters. \r\nI have a doubt about time. Do we count the time in the DoF or not if there are no time measurements? \r\nI think it should be -5 for a 3D track and -6 for a 4D track (i.e. if there is at least one time measurement). If there are only 3D measurements than time is a function on the other 5 TPs, hence not a DoF. Can the TrackHelpers tool be improved to reflect this or is the idea to leave it to the clients?\r\n@paulgessinger @andiwand \r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2076",
    "updated_at": "2023-06-22T14:29:27+00:00",
    "created_at": "2023-05-01T13:21:33+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "refactor: remove direction from constrained step",
    "user": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "labels": [
      {
        "name": "Component - Core"
      },
      {
        "name": ":construction: WIP"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/pull/2073",
    "number": 2073,
    "assignee": null,
    "body": "WIP\r\n\r\nWith this PR I want to remove the propagation direction sign inside the `ConstrainedStep` and put it into the stepper as it feels like additional burden and logic that should not be handled by the `ConstrainedStep`. This will not change anything about the overstepping mechanics.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2073",
    "updated_at": "2023-06-10T11:25:23+00:00",
    "created_at": "2023-04-28T08:51:49+00:00",
    "closed_at": null,
    "is_wip": true,
    "is_stale": true,
    "pull_request": {
      "url": "https://api.github.com/repos/acts-project/acts/pulls/2073",
      "html_url": "https://github.com/acts-project/acts/pull/2073",
      "diff_url": "https://github.com/acts-project/acts/pull/2073.diff",
      "patch_url": "https://github.com/acts-project/acts/pull/2073.patch",
      "merged_at": null
    }
  },
  {
    "title": "Proposal: MultiWire SurfaceCandidateUpdator",
    "user": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2063",
    "number": 2063,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "Based on some fantastic work from @dimitra97 - I suggest the following implementation of a first multi-wire layer\r\n\r\n![Screenshot 2023-04-26 at 13 09 57](https://user-images.githubusercontent.com/26623879/234558213-afa5fabe-d20c-436f-818f-c56ea4c51533.png)\r\n\r\n```c++\r\ntemplate <typename IndexedSurfacesGridType>\r\nclass MultiWireLayer : public INavigationDelegate {\r\n\r\n  std::vector<std::shared_ptr<Surface>> m_gridSurfaces = {};\r\n  IndexedSurfacesGridType m_indexedSurfaces;\r\n\r\n};\r\n```\r\n\r\nWhere, when entering a chamber and we call the navigation delegate, it does first:\r\n\r\n```c++\r\nstd::vector<SurfaceIntersection> sIntersections;\r\nsIntersections.reserve(m_gridSurfaces.size());\r\nstd::for_each(m_gridSurfaces.begin(), m_gridSurfaces.end(), [&] (const auto&s){... do intersection });\r\n```\r\n\r\nAnd then we use the intersection with the grid surfaces to provide the straws, when filling the grid, we can expand the surfaces into the neighbour bins so we have an artificial path through the multi chamber.\r\n\r\nDoes this make sense?\r\n\r\n@noemina @andiwand \r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2063",
    "updated_at": "2023-06-21T12:46:47+00:00",
    "created_at": "2023-04-26T11:17:42+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "LCG compatibility",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2054",
    "number": 2054,
    "assignee": null,
    "body": "Our LCG compatibility doesn't look all that great right now.\r\nWe currently fail all of our clang builds with [compiler crashes](https://gitlab.cern.ch/acts/ci-bridge/-/jobs/29044714) and gcc12 seems to [throw some diagnostic](https://gitlab.cern.ch/acts/ci-bridge/-/jobs/29044722) against memory issues on some boost code that we use:\r\n\r\n| LCG ver. | CentOS 7                                                  | CentOS 8 | ALMA9                   |\r\n| -------- | --------------------------------------------------------- | -------- | ----------------------- |\r\n| 101      | \u2705 gcc10 <br/> \u2705 gcc11 <br/> \ud83d\udd34 clang12                  | \u2705 gcc11 |                         | \r\n| 102b     | \ud83d\udd34 gcc8 <br/> \u2705 gcc11 <br/> \ud83d\udd34 clang12                   | \u2705 gcc11 | \u2705 gcc11                |\r\n| 103      | \u2705 gcc11 <br/> \ud83d\udd34 gcc12 <br/> \ud83d\udd34 clang12 <br/> \ud83d\udd34 clang15 |          | \u2705 gcc11 <br/> \ud83d\udd34 gcc12 |",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2054",
    "updated_at": "2023-06-24T18:32:24+00:00",
    "created_at": "2023-04-22T08:09:04+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Track parameter estimation algorithm return parameter on the first seed SP surface ",
    "user": {
      "login": "Corentin-Allaire",
      "html_url": "https://github.com/Corentin-Allaire"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2037",
    "number": 2037,
    "assignee": null,
    "body": "To use our seed as an input of the CKF, we use `TrackParamsEstimationAlgorithm` to convert them into track parameters. This algorithm computes track parameters on the first seed space point surface. \r\n\r\nThis could be an issue if the seed is too far away from the perigee, as this would mean we could miss some of the track hits in the CKF.\r\n\r\nShould we instead extrapolate those parameters to the perigee (the change would be pretty trivial but will break our testing infrastructure), or should we keep it as is?\r\n\r\nIn any case, I think we should be more explicit about this in the doc/code.\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2037",
    "updated_at": "2023-05-25T15:01:53+00:00",
    "created_at": "2023-04-17T15:40:31+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Feature: Measurement removal to get unbiased residual  during smoothing",
    "user": {
      "login": "XiaocongAi",
      "html_url": "https://github.com/XiaocongAi"
    },
    "labels": [
      {
        "name": "Component - Core"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/2031",
    "number": 2031,
    "assignee": {
      "login": "XiaocongAi",
      "html_url": "https://github.com/XiaocongAi"
    },
    "body": "Currently, if we want to get the unbiased residual for a  measurement, we have to manually remove this measurement in the KF. According to NIM A262 (1987) 444-450 (eq 12a-c and 12d-e), this can more readily obtained in one go in the smoother using some formalism. Implementation of such functionality in ACTS will be very helpful for experiments.\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/2031",
    "updated_at": "2023-05-20T15:23:34+00:00",
    "created_at": "2023-04-14T04:46:58+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Expose individual steps of track reconstruction in full_chain python scripts",
    "user": {
      "login": "tboldagh",
      "html_url": "https://github.com/tboldagh"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Needs Decision"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Long Term"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1997",
    "number": 1997,
    "assignee": null,
    "body": "Discussing the easier way for EF Tracking people to play with ACTS it turned out that it would be beneficial to expose reconstruction pipeline in mode details in the top level scripts (at least for the ITK).\r\nHaving a script where all the steps are clearly visible would encourage people to play with it (e.g. replace one module). \r\nThe configuration as is (especially seeding) is quite convoluted and general. Presumably we talk here about one workflow with:\r\ndata prep. -> clusterisation -> sp making -> seeding -> CKF and the candidate to play with is seeding.\r\n\r\n\r\nThis issue is realy to hear opinions about it. \r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1997",
    "updated_at": "2023-05-20T15:23:32+00:00",
    "created_at": "2023-03-27T19:33:45+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Improvements to Track EDM",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Core"
      },
      {
        "name": "Stale"
      },
      {
        "name": "Event Data Model"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1993",
    "number": 1993,
    "assignee": null,
    "body": "- [ ] Add documentation and clarify `tipIndex`\r\n- [ ] Add a concrete example (maybe in the docs?) how to create a track with track states from scratch\r\n- #1994\r\n- #2035 \r\n- [x] Add functionality to \"append\" a Track State",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1993",
    "updated_at": "2023-05-20T15:23:31+00:00",
    "created_at": "2023-03-27T09:51:13+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "vertex fitting and duplicate tracks",
    "user": {
      "login": "rubihason",
      "html_url": "https://github.com/rubihason"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1992",
    "number": 1992,
    "assignee": null,
    "body": "Hello, while i running vertex fitting, i got error on each event.\r\n\r\n'''\r\nNumber of fitted tracks and associated truth particles do not match. (48 != 14) Not able to match fitted tracks at reconstructed vertex to truth vertex. Switch to hit based truth matching. \r\n'''\r\nI believe it came due to a large number of duplicate tracks. \r\n\r\n'''\r\n12:52:16    SeedingPerfo   INFO      Efficiency (nMatchedParticles / nAllParticles) = 0.681481\r\n12:52:16    SeedingPerfo   INFO      Fake rate (nUnMatchedSeeds / nAllSeeds) = 0.0011274\r\n12:52:16    SeedingPerfo   INFO      Duplication rate (nDuplicatedMatchedParticles / nMatchedParticles) = 0.956522\r\n12:52:16    SeedingPerfo   INFO      Average number of duplicated seeds ((nMatchedSeeds - nMatchedParticles) / nMatchedParticles) = 3.81522\r\n'''\r\nI simulated the event of PP to Z to Mu+ Mu-.\r\nWhat can I do to fix this problem?\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1992",
    "updated_at": "2023-05-09T02:48:11+00:00",
    "created_at": "2023-03-26T09:59:52+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "SpacePoint EDM design",
    "user": {
      "login": "CarloVarni",
      "html_url": "https://github.com/CarloVarni"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1971",
    "number": 1971,
    "assignee": null,
    "body": "A quick overview of the design I'm envision is the following:\r\n\r\n![SchemaEDM](https://user-images.githubusercontent.com/75478407/226541858-05ffc040-57aa-4ad0-8311-f1bbf1ab007c.png)\r\n\r\nFew points:\r\n- The index of the `Acts::SpacePointProxy` will never be exposed to the user. It is a quantity that acts as a unique identifier for that proxy and that will let the code navigate and retrieve the correct quantities from the `Acts::SpacePointData`. The proxy will have a `component` class, trough which the user will require the value of a specific variable. The code will internally retrieve it using this index\r\n- The `Acts::SpacePointData` acts the same way an auxiliary container works in Athena. The implementation may differ, but the idea is the same. This will be internally stored in the `Acts::SpacePointContainer` and properly initialized during the Container constructor. As of now (as a temporary solution while we are still missing the space point container in ACTS), the `Acts::SpacePointData` object is part of the seed finder state and manually passed to the functions within the seeding code\r\n- We want to keep the `Acts::SpacePointProxy` object as small as possible (as of now just pointer + unsigned long int)\r\n- Not clear what the best strategy is for the `Acts::SpacePointContainer`: storing a pointer to the experiment interface (as done for tracks) or going for a CRTP (as done for MTJ)\r\n\r\n\r\n/cc @paulgessinger @tboldagh ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1971",
    "updated_at": "2023-05-09T02:48:12+00:00",
    "created_at": "2023-03-21T07:38:17+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Estimate Track Parameters from Seeds use only one surface. What about strips?",
    "user": {
      "login": "CarloVarni",
      "html_url": "https://github.com/CarloVarni"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1895",
    "number": 1895,
    "assignee": null,
    "body": "The estimation of track parameters from seed uses space point information, but also uses a surface to perform a global-to-local transformation of the bottom space point coordinate. It also checks that the bottom space point lies on the provided surface: \r\nhttps://github.com/acts-project/acts/blob/main/Core/include/Acts/Seeding/EstimateTrackParamsFromSeed.hpp#L156 \r\n\r\nThis may be appropriate for pixels, since there is only one surface. But does it apply also to strips and overlap strips? We are only using one surface in that function, but the space point is constructed from multiple 1D measurements. In the strip overlap case these measurements are not even back-to-back.\r\n\r\nOr in general, what would be the appropriate procedure in cases in which we have 3D space point positions starting from multiple measurements? \r\n\r\n/cc @noemina @paulgessinger ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1895",
    "updated_at": "2023-05-09T02:48:10+00:00",
    "created_at": "2023-02-24T10:58:04+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Bug: Unpredicatable navigation in layer with overlapping surface",
    "user": {
      "login": "Corentin-Allaire",
      "html_url": "https://github.com/Corentin-Allaire"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Component - Core"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1852",
    "number": 1852,
    "assignee": null,
    "body": "While helping people perform the material mapping with a simple \"testbeam like\" detector, I notice an issue with the navigation. If in a layer we have 2 (or more) surfaces at the same position (ie : the `pathlenght` from the previous surface is the same) then the navigation will only visit one of those surfaces (which expected) but which one is not predictable.\r\n\r\nIn the sorting of the layer surfaces (in Layer.cpp line 231) we chain a sort based on the surface memory address with one based on` pathlenght` this mean for two surface with the same `pathlenght` it is impossible to predict which one will be first.\r\n\r\nIn the particular example I mention at the start the representing surface and the sensitive surface ended up being at the same position, this meant that when trying to map onto the sensitive surface half of them did have material (since the representing surface was crossed first).\r\n\r\nI see three possible solutions to this issue : \r\n- Return an error during the layer construction if multiple layer overlap (but then someone would need to look at the TGeo conversion to see why does the layers it constructs have overlapping surfaces).\r\n- Modify the layer construction to slightly shift the surface at creation to avoid overlap (with maybe some warning ?).\r\n- Modify the navigation to have unambiguous surface ordering, but this would probably slow down navigation, which is not ideal. Here is an example of unambiguous ordering that always return the \"deepest\" surface in the hierarchy : \r\n```\r\n  // Sort by object address\r\n  std::sort(sIntersections.begin(), sIntersections.end(),\r\n            [](const auto& a, const auto& b) { return a.object < b.object; });\r\n  // Now look for duplicates. As we just sorted by path length, duplicates\r\n  // should be subsequent\r\n  auto it = std::unique(\r\n      sIntersections.begin(), sIntersections.end(),\r\n      [](const SurfaceIntersection& a, const SurfaceIntersection& b) -> bool {\r\n        return a.object == b.object;\r\n      });\r\n\r\n  // resize to remove all items that are past the unique range\r\n  sIntersections.resize(std::distance(sIntersections.begin(), it));\r\n\r\n  std::sort(sIntersections.begin(), sIntersections.end(),\r\n            [](const auto& a, const auto& b) { return a.object->geometryId() < b.object->geometryId(); });\r\n\r\n  // sort according to the path length\r\n  if (options.navDir == NavigationDirection::Forward) {\r\n    std::stable_sort(sIntersections.begin(), sIntersections.end());\r\n  } else {\r\n    std::stable_sort(sIntersections.begin(), sIntersections.end(), std::greater<>());\r\n  }\r\n\r\n  return sIntersections;\r\n}\r\n```\r\nIf anybody has an opinion on this please let me know !\r\n\r\nPS : while looking at the navigation I realised we might also have an issue with boundary material being missed when navigating backward through the detector. This is something I need to investigate.\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1852",
    "updated_at": "2023-03-25T09:17:54+00:00",
    "created_at": "2023-02-10T10:34:43+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Different results for full_chain_itk when running locally vs lxplus",
    "user": {
      "login": "CarloVarni",
      "html_url": "https://github.com/CarloVarni"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1819",
    "number": 1819,
    "assignee": null,
    "body": "Running `full_chain_itk.py` both locally on my computer and on lxplus I've noticed different results. \r\nFor instance the number of seeds (default seeding strategy) changed from 2219 to 2281 on  100 events.\r\n\r\nOn lxplus:\r\n```console\r\n12:23:00    TrackFinding   INFO      TrackFindingAlgorithm statistics:\r\n12:23:00    TrackFinding   INFO      - total seeds: 2281\r\n12:23:00    TrackFinding   INFO      - failed seeds: 0\r\n12:23:00    TrackFinding   INFO      - failure ratio: 0\r\n12:23:00    RootParticle   INFO      Wrote particles to tree 'particles' in '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/fatras_particles_final.root'\r\n12:23:00    RootParticle   INFO      Wrote particles to tree 'particles' in '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/fatras_particles_initial.root'\r\n12:23:00    SeedingPerfo   INFO      Efficiency (nMatchedParticles / nAllParticles) = 0.995\r\n12:23:00    SeedingPerfo   INFO      Fake rate (nUnMatchedSeeds / nAllSeeds) = 0\r\n12:23:00    SeedingPerfo   INFO      Duplication rate (nDuplicatedMatchedParticles / nMatchedParticles) = 1\r\n12:23:00    SeedingPerfo   INFO      Average number of duplicated seeds ((nMatchedSeeds - nMatchedParticles) / nMatchedParticles) = 10.4623\r\n12:23:00    SeedingPerfo   INFO      Wrote performance plots to '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/performance_seeding_hists.root:/'\r\n12:23:00    RootTrackPar   INFO      Wrote estimated parameters from seed to tree 'estimatedparams' in '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/estimatedparams.root'\r\n12:23:01    RootTrajecto   INFO      Wrote states of trajectories to tree 'trackstates' in 'trackstates'\r\n12:23:01    RootTrajecto   INFO      Wrote parameters of trajectories to tree 'tracksummary' in '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/tracksummary_ckf.root'\r\n12:23:01    CKFPerforman   INFO      Efficiency with tracks (nMatchedTracks/ nAllTracks) = 1\r\n12:23:01    CKFPerforman   INFO      Fake rate with tracks (nFakeTracks/nAllTracks) = 0\r\n12:23:01    CKFPerforman   INFO      Duplicate rate with tracks (nDuplicateTracks/nAllTracks) = 0.912257\r\n12:23:01    CKFPerforman   INFO      Efficiency with particles (nMatchedParticles/nTrueParticles) = 0.995\r\n12:23:01    CKFPerforman   INFO      Fake rate with particles (nFakeParticles/nTrueParticles) = 0\r\n12:23:01    CKFPerforman   INFO      Duplicate rate with particles (nDuplicateParticles/nTrueParticles) = 0.99\r\n12:23:01    CKFPerforman   INFO      Wrote performance plots to '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/performance_ckf.root:/'\r\n12:23:01    RootTrajecto   INFO      Wrote states of trajectories to tree 'trackstates' in 'trackstates'\r\n12:23:01    RootTrajecto   INFO      Wrote parameters of trajectories to tree 'tracksummary' in '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/tracksummary_ambi.root'\r\n12:23:01    CKFPerforman   INFO      Efficiency with tracks (nMatchedTracks/ nAllTracks) = 1\r\n12:23:01    CKFPerforman   INFO      Fake rate with tracks (nFakeTracks/nAllTracks) = 0\r\n12:23:01    CKFPerforman   INFO      Duplicate rate with tracks (nDuplicateTracks/nAllTracks) = 0\r\n12:23:01    CKFPerforman   INFO      Efficiency with particles (nMatchedParticles/nTrueParticles) = 0.995\r\n12:23:01    CKFPerforman   INFO      Fake rate with particles (nFakeParticles/nTrueParticles) = 0\r\n12:23:01    CKFPerforman   INFO      Duplicate rate with particles (nDuplicateParticles/nTrueParticles) = 0\r\n12:23:01    CKFPerforman   INFO      Wrote performance plots to '/afs/cern.ch/work/c/cvarni/public/ACTS/RunningLxplus/itk_output/performance_ambi.root:/'\r\n12:23:01    Sequencer      INFO      Processed 100 events in 1.761359 s (wall clock)\r\n12:23:01    Sequencer      INFO      Average time per event: 317.973619 ms/event\r\n```\r\n\r\nLocally:\r\n```console\r\n12:50:55    TrackFinding   INFO      TrackFindingAlgorithm statistics:\r\n12:50:55    TrackFinding   INFO      - total seeds: 2219\r\n12:50:55    TrackFinding   INFO      - failed seeds: 0\r\n12:50:55    TrackFinding   INFO      - failure ratio: 0\r\n12:50:55    RootParticle   INFO      Wrote particles to tree 'particles' in '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/fatras_particles_final.root'\r\n12:50:55    RootParticle   INFO      Wrote particles to tree 'particles' in '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/fatras_particles_initial.root'\r\n12:50:55    SeedingPerfo   INFO      Efficiency (nMatchedParticles / nAllParticles) = 0.995\r\n12:50:55    SeedingPerfo   INFO      Fake rate (nUnMatchedSeeds / nAllSeeds) = 0\r\n12:50:55    SeedingPerfo   INFO      Duplication rate (nDuplicatedMatchedParticles / nMatchedParticles) = 1\r\n12:50:55    SeedingPerfo   INFO      Average number of duplicated seeds ((nMatchedSeeds - nMatchedParticles) / nMatchedParticles) = 10.1508\r\n12:50:55    SeedingPerfo   INFO      Wrote performance plots to '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/performance_seeding_hists.root:/'\r\n12:50:55    RootTrackPar   INFO      Wrote estimated parameters from seed to tree 'estimatedparams' in '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/estimatedparams.root'\r\n12:50:55    RootTrajecto   INFO      Wrote states of trajectories to tree 'trackstates' in 'trackstates'\r\n12:50:55    RootTrajecto   INFO      Wrote parameters of trajectories to tree 'tracksummary' in '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/tracksummary_ckf.root'\r\n12:50:55    CKFPerforman   INFO      Efficiency with tracks (nMatchedTracks/ nAllTracks) = 1\r\n12:50:55    CKFPerforman   INFO      Fake rate with tracks (nFakeTracks/nAllTracks) = 0\r\n12:50:55    CKFPerforman   INFO      Duplicate rate with tracks (nDuplicateTracks/nAllTracks) = 0.90971\r\n12:50:55    CKFPerforman   INFO      Efficiency with particles (nMatchedParticles/nTrueParticles) = 0.995\r\n12:50:55    CKFPerforman   INFO      Fake rate with particles (nFakeParticles/nTrueParticles) = 0\r\n12:50:55    CKFPerforman   INFO      Duplicate rate with particles (nDuplicateParticles/nTrueParticles) = 0.99\r\n12:50:55    CKFPerforman   INFO      Wrote performance plots to '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/performance_ckf.root:/'\r\n12:50:55    RootTrajecto   INFO      Wrote states of trajectories to tree 'trackstates' in 'trackstates'\r\n12:50:55    RootTrajecto   INFO      Wrote parameters of trajectories to tree 'tracksummary' in '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/tracksummary_ambi.root'\r\n12:50:55    CKFPerforman   INFO      Efficiency with tracks (nMatchedTracks/ nAllTracks) = 1\r\n12:50:55    CKFPerforman   INFO      Fake rate with tracks (nFakeTracks/nAllTracks) = 0\r\n12:50:55    CKFPerforman   INFO      Duplicate rate with tracks (nDuplicateTracks/nAllTracks) = 0\r\n12:50:55    CKFPerforman   INFO      Efficiency with particles (nMatchedParticles/nTrueParticles) = 0.995\r\n12:50:55    CKFPerforman   INFO      Fake rate with particles (nFakeParticles/nTrueParticles) = 0\r\n12:50:55    CKFPerforman   INFO      Duplicate rate with particles (nDuplicateParticles/nTrueParticles) = 0\r\n12:50:55    CKFPerforman   INFO      Wrote performance plots to '/Users/carlovarni/Desktop/RunningSeedLocally/itk_output/performance_ambi.root:/'\r\n12:50:55    Sequencer      INFO      Processed 100 events in 1.008129 s (wall clock)\r\n12:50:55    Sequencer      INFO      Average time per event: 59.768961 ms/event\r\n```\r\n\r\nhtml files with physmon plots on the produced files can be found on:\r\n- performance_seeding_hists.root -> https://cvarni.web.cern.ch/ActsArtTest/acts_local_lxplus/seed_hist.html\r\n- performance_ckf.root -> https://cvarni.web.cern.ch/ActsArtTest/acts_local_lxplus/ckf.html\r\n- performance_ambi.root -> https://cvarni.web.cern.ch/ActsArtTest/acts_local_lxplus/ambi.html \r\n\r\nFor running on lxplus I'm sourcing https://github.com/acts-project/acts/blob/main/CI/setup_cvmfs_lcg.sh \r\n\r\nWhat can cause these differences in the outputs?\r\n\r\n/cc @paulgessinger \r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1819",
    "updated_at": "2023-05-09T02:48:18+00:00",
    "created_at": "2023-02-02T11:52:10+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Cmake error if ACTS_BUILD_PLUGIN_ACTSVG=ON",
    "user": {
      "login": "DraTeots",
      "html_url": "https://github.com/DraTeots"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1818",
    "number": 1818,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "## Bug prerequisites\r\n\r\n1. When ACTS v21.1.1 is built with flags: \r\n\r\n   ```bash\r\n     cmake -Wno-dev -DCMAKE_INSTALL_PREFIX=/home/user/acts/acts-v21.1.1 \r\n     -DCMAKE_CXX_STANDARD=17 \r\n     -DACTS_BUILD_PLUGIN_TGEO=ON \r\n     -DACTS_BUILD_PLUGIN_DD4HEP=ON \r\n     -DACTS_BUILD_PLUGIN_JSON=ON \r\n     -DACTS_BUILD_PLUGIN_ACTSVG=ON  \r\n     /home/user/acts/src/v21.1.1&& cmake --build . -- -j 4&& cmake --build . --target install\r\n   ```\r\n   \r\n2. Cmake message confirms installation of Actsvg plugin: \r\n\r\n    ```\r\n    ...\r\n    -- Enable component 'Core' in 'Core'\r\n    -- Ignore component 'PluginAutodiff' in 'Plugins/Autodiff'\r\n    -- Enable component 'PluginActSVG' in 'Plugins/ActSVG'\r\n    -- Ignore component 'PluginCuda' in 'Plugins/Cuda'\r\n    -- Enable component 'PluginIdentification' in 'Plugins/Identification'\r\n    -- Enable component 'PluginJson' in 'Plugins/Json'\r\n    -- Ignore component 'PluginLegacy' in 'Plugins/Legacy'\r\n    -- Ignore component 'PluginOnnx' in 'Plugins/Onnx'\r\n    -- Ignore component 'PluginSycl' in 'Plugins/Sycl'\r\n    -- Ignore component 'PluginExaTrkX' in 'Plugins/ExaTrkX'\r\n    -- Enable component 'PluginTGeo' in 'Plugins/TGeo'\r\n    -- Enable component 'PluginDD4hep' in 'Plugins/DD4hep'\r\n    -- Ignore component 'Fatras' in 'Fatras'\r\n    -- Ignore component 'Alignment' in 'Alignment'\r\n    -- Ignore subdirectory 'Examples'\r\n    -- Ignore subdirectory 'docs'\r\n    -- Configuring done\r\n    ```\r\n    \r\n3. Full log is here: [2023-02-01_acts-cmake-build-log.txt](https://github.com/acts-project/acts/files/10559406/2023-02-01_acts-cmake-build-log.txt)\r\n\r\n4. Acts successfully compiled and installed\r\n\r\n## What goes wrong\r\n\r\nOur reconstruction framework using Acts have this in cmake:\r\n\r\n```cmake\r\nfind_package(Acts REQUIRED COMPONENTS Core PluginIdentification PluginTGeo PluginDD4hep)\r\n```\r\n\r\nit gives an error: \r\n\r\n```\r\n-- loading components:\r\n--   Core\r\n--   PluginActSVG\r\n--   PluginIdentification\r\n--   PluginJson\r\n--   PluginTGeo\r\n--   PluginDD4hep\r\nCMake Error at CMakeLists.txt:77 (find_package):\r\n  Found package configuration file:\r\n\r\n    /home/romanov/eic/soft/acts/acts-v21.1.1/lib/cmake/Acts/ActsConfig.cmake\r\n\r\n  but it set Acts_FOUND to FALSE so package \"Acts\" is considered to be NOT\r\n  FOUND.  Reason given by package:\r\n\r\n  The following imported targets are referenced, but are missing:\r\n  actsvg::core actsvg::meta\r\n```\r\n\r\n(A bit confusing that it prints loading PluginActSVG when not asked but OK probably, right?)\r\n\r\n## What I have tried\r\n\r\n1. Build actsvg on my system, add it to cmake and LD paths\r\n2. Used `-DACTS_USE_SYSTEM_ACTSVG=ON` and played with ACTSVG related flag combinations\r\n\r\n\r\n## What goes as expected\r\n\r\nBuilding with `-DACTS_BUILD_PLUGIN_ACTSVG=OFF` makes everything work\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1818",
    "updated_at": "2023-05-09T02:48:15+00:00",
    "created_at": "2023-02-01T17:05:53+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Make central minimum track momentum threshold",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1761",
    "number": 1761,
    "assignee": null,
    "body": "        should we make this configurable? not necessarily in this pr but we can also follow up with a ticket\r\n\r\n_Originally posted by @andiwand in https://github.com/acts-project/acts/pull/1649#discussion_r1052134329_\r\n      \r\nContext: our $q/p$ is not valid for $p=0$. The material interaction code was updated to set a minimum momentum threshold (arbitrarily set to 10 MeV). This should be centralized, and the particle stop-aborter updated to recognize this. I guess we could use some agreed on very small sentinel value that the particle stop aborter picks up on, @andiwand?",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1761",
    "updated_at": "2023-01-21T02:16:56+00:00",
    "created_at": "2022-12-19T12:57:05+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Physmon throws many WARNINGs on Bethe-Heitler approximation",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1748",
    "number": 1748,
    "assignee": {
      "login": "benjaminhuth",
      "html_url": "https://github.com/benjaminhuth"
    },
    "body": "```\r\n16:37:06    TrackFitting   WARNING   Bethe-Heitler approximation encountered invalid value for x/x0=0.54459 at surface vol=30|bnd=4\r\n```",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1748",
    "updated_at": "2023-05-09T02:48:14+00:00",
    "created_at": "2022-12-14T15:38:56+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Drop `boost progress` from examples where it is not used",
    "user": {
      "login": "tboldagh",
      "html_url": "https://github.com/tboldagh"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1736",
    "number": 1736,
    "assignee": null,
    "body": "In this two files:\r\nhttps://github.com/acts-project/acts/blob/main/Examples/Scripts/MaterialMapping/MaterialComposition.cpp\r\nhttps://github.com/acts-project/acts/blob/main/Examples/Scripts/TrackingPerformance/TrackSummary.cpp\r\nThe boost progress display is defined (which generates deprecation warnings when compiling in docker image) but seems not to be used. Should it be still kept around?\r\n```\r\n[199/1062] Building CXX object Examples/Scripts/MaterialMapping/CMakeFiles/ActsAnalysisMaterialComposition.dir/MaterialComposition.cpp.o\r\nIn file included from /usr/include/boost/config/header_deprecated.hpp:18,\r\n                 from /usr/include/boost/progress.hpp:22,\r\n                 from /ATLAS/tbold/acts/ht-py-bindings/acts/Examples/Scripts/MaterialMapping/MaterialComposition.cpp:21:\r\n/usr/include/boost/progress.hpp:23:1: note: #pragma message: This header is deprecated. Use the facilities in <boost/timer/timer.hpp> instead.\r\n   23 | BOOST_HEADER_DEPRECATED( \"the facilities in <boost/timer/timer.hpp>\" )\r\n```\r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1736",
    "updated_at": "2023-01-16T01:09:50+00:00",
    "created_at": "2022-12-12T16:17:42+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Remove `volumeSignature` from geometry building",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1731",
    "number": 1731,
    "assignee": null,
    "body": "I think this is a relic from the ATLAS software originally.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1731",
    "updated_at": "2023-01-16T01:09:50+00:00",
    "created_at": "2022-12-12T14:30:53+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Optimal seeding parameters for a detector",
    "user": {
      "login": "CouthuresJeremy",
      "html_url": "https://github.com/CouthuresJeremy"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1699",
    "number": 1699,
    "assignee": null,
    "body": "Hello,\r\nWould it be possible to add the set of default seeding parameters for each detector in the documentation?\r\nWe are interested in studying ODD first:\r\n[https://acts.readthedocs.io/en/latest/getting_started.html#the-opendatadetector](url)\r\nAnd later we would like to work with ITk and the same question will arise.\r\n@stephenswat @LuisFelipeCoelho ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1699",
    "updated_at": "2023-01-05T05:04:35+00:00",
    "created_at": "2022-11-28T14:26:58+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "error while i running full_chain_odd.py",
    "user": {
      "login": "rubihason",
      "html_url": "https://github.com/rubihason"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1661",
    "number": 1661,
    "assignee": null,
    "body": "Hello,\r\nI was trying to run the script full_chain_odd in python, and I got this error:\r\n```\r\nroot@Rubi:~/Thesis/acts/Examples/Scripts/Python# python3 full_chain_odd.py\r\nError in <TFile::ReadBuffer>: error reading all requested bytes from file /root/Thesis/acts/thirdparty/OpenDataDetector/data/odd-material-maps.root, got 133 of 300\r\nError in <TFile::Init>: /root/Thesis/acts/thirdparty/OpenDataDetector/data/odd-material-maps.root failed to read the file type data.\r\nTraceback (most recent call last):\r\n  File \"full_chain_odd.py\", line 18, in <module>\r\n    oddMaterialDeco = acts.IMaterialDecorator.fromFile(oddMaterialMap)\r\n  File \"/root/Thesis/acts/acts.build/python/acts/__init__.py\", line 60, in _decoratorFromFile\r\n    return ActsPythonBindings._examples.RootMaterialDecorator(\r\n  File \"/root/Thesis/acts/acts.build/python/acts/_adapter.py\", line 30, in wrapped\r\n    fn(self, cfg, *args, **_kwargs)\r\nRuntimeError: Could not open '/root/Thesis/acts/thirdparty/OpenDataDetector/data/odd-material-maps.root: iostream errorroot@Rubi:~/Thesis/acts/Examples/Scripts/Python#",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1661",
    "updated_at": "2023-05-09T02:48:09+00:00",
    "created_at": "2022-11-08T17:42:39+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Create volume restricted BFieldMap ",
    "user": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1659",
    "number": 1659,
    "assignee": null,
    "body": "As discussed in the context of `FASER2` a convenient volume restricted Bfield map could be very useful.\r\n\r\nPossible implementation:\r\n\r\n```c++\r\n\r\ntemplate <typename field_type>\r\nRestrictedBField {\r\n public:\r\n   RestrictedBField(std::unique_ptr <Volume> volume);\r\n\r\n\r\n  /// @copydoc MagneticFieldProvider::getFieldGradient(const Vector3&,ActsMatrix<3,3>&,MagneticFieldProvider::Cache&) const\r\n  ///\r\n  /// @note The @p position is ignored and only kept as argument to provide\r\n  ///       a consistent interface with other magnetic field services.\r\n  /// @note currently the derivative is not calculated\r\n  /// @todo return derivative\r\n  Result<Vector3> getFieldGradient(\r\n      const Vector3& position, ActsMatrix<3, 3>& derivative,\r\n      MagneticFieldProvider::Cache& cache) const override;\r\n\r\n  /// and other access methods\r\n\r\n private : \r\n  std::unique_ptr<Volume> m_magVolume;\r\n\r\n};\r\n```\r\n\r\nAnd then simply do in the `getX(...)` implementations:\r\n\r\n```c++\r\n  if (m_magVolume->inside(position)){\r\n    // forward call to field_type::getX(...)\r\nreturn;\r\n  }\r\n  // set field to (0,0,0) otherwise\r\n```",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1659",
    "updated_at": "2022-12-21T04:10:09+00:00",
    "created_at": "2022-11-07T16:24:06+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Bad physmon results if interactions enabled in Fatras",
    "user": {
      "login": "benjaminhuth",
      "html_url": "https://github.com/benjaminhuth"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1643",
    "number": 1643,
    "assignee": null,
    "body": "Until now, all interactions are disabled by default in Fatras. Enabling them causes quite some bad results in the physmon for some setups (see plots in #1631).\r\nWhat should be the next steps to investigate this?",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1643",
    "updated_at": "2023-05-09T02:48:19+00:00",
    "created_at": "2022-11-01T14:09:50+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Particle smearing assertion with Geant4",
    "user": {
      "login": "benjaminhuth",
      "html_url": "https://github.com/benjaminhuth"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1603",
    "number": 1603,
    "assignee": {
      "login": "benjaminhuth",
      "html_url": "https://github.com/benjaminhuth"
    },
    "body": "When enabling `ACTS_FORCE_ASSERTIONS=ON` and doing some simulation with Geant4 + Particle smearing, this assertion can occur:\r\n\r\n![issue](https://user-images.githubusercontent.com/37871400/196447645-41d51a14-c5d6-4f6a-90f9-b7e2f2f65fe2.png)\r\n\r\nThe reason seems to be that there is this particle with PDG `1000140300` is produced by geant, which as charge `+14` or so, but this does not work with the `Acts::SinglyCharged`-charge.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1603",
    "updated_at": "2022-12-21T04:10:59+00:00",
    "created_at": "2022-10-18T13:51:08+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Add Primary Vertex Label to tracks",
    "user": {
      "login": "Lucas-Borgna",
      "html_url": "https://github.com/Lucas-Borgna"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1544",
    "number": 1544,
    "assignee": null,
    "body": "Adding new feature that gives a label to tracks that indicate if they originate from the primary hard scattering vertex or if they came from a pileup. This is not tagetted for a particular release or milestone. \r\n\r\nThe changes should be contained within [TrackFitterPerformanceWriter.cpp](https://github.com/acts-project/acts/blob/main/Examples/Io/Performance/ActsExamples/Io/Performance/TrackFitterPerformanceWriter.cpp) file.\r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1544",
    "updated_at": "2022-10-22T18:34:48+00:00",
    "created_at": "2022-09-21T14:02:46+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Optionally have the vertex finding recalculate perigee parameters relative to consistent reference",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1482",
    "number": 1482,
    "assignee": null,
    "body": null,
    "url": "https://api.github.com/repos/acts-project/acts/issues/1482",
    "updated_at": "2022-10-01T15:28:32+00:00",
    "created_at": "2022-09-01T15:12:02+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation: hints for debugging",
    "user": {
      "login": "timadye",
      "html_url": "https://github.com/timadye"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Needs Decision"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1463",
    "number": 1463,
    "assignee": null,
    "body": "It would be nice to have some documentation with hints for debugging ACTS. There are a few specifics:\r\n1. how to debug C++ with the Python examples\r\n2. setting breakpoints after shared library loading\r\n3. debug single-threaded if possible\r\n4. often simpler to set breakpoints by source file location, rather than using heavily templated symbols.\r\n5. `Debug` build can help, but default `RelWithDebInfo` still possible.\r\n\r\nHere is an example I posted to Mattermost that deals with most of these issues. Maybe it would be a good starting point for the documentation. I only have experience of `gdb`. Andi suggested adding links to the different debuggers.\r\n\r\nI didn't yet make a WiP PR, because I don't know where to put this. Should it go on a page of its own, or in a section elsewhere?\r\n\r\n---\r\n\r\nIt's much easier to run with 1 thread. It's fine to use the Python examples. I edited to set `numThreads=1` in `acts.examples.Sequencer()`. Then ran `gdb`:\r\n```\r\ngdb --args python3 Examples/Scripts/Python/full_chain_itk.py\r\n(gdb) b ActsExamples::Sequencer::run()\r\nFunction \"ActsExamples::Sequencer::run()\" not defined.\r\nMake breakpoint pending on future shared library load? (y or [n]) y\r\nBreakpoint 1 (ActsExamples::Sequencer::run()) pending.\r\n```\r\n\r\nAfter that, the log includes 8 messages like:\r\n```\r\n[Detaching after fork from child process 254497]\r\n```\r\nbut those are mostly ROOT running various commands, so not a problem for debugging ACTS. It breaks here:\r\n```\r\nBreakpoint 1, ActsExamples::Sequencer::run (this=this@entry=0x3df39000) at Examples/Framework/src/Framework/Sequencer.cpp:242\r\n242       Timepoint clockWallStart = Clock::now();\r\n```\r\n\r\nAt this point, the program has loaded all the ACTS shared libraries, so you can now set breakpoints directly, not just pending ones. Of course if you want to debug the sequence setup, you'll have to set a breakpoint earlier. But for algorithm execution, `Sequencer::run()` is a good place to start.\r\n\r\nIt can be very difficult to set breakpoints using the fully qualified templated symbols, but easy to use the source line, eg.\r\n```\r\n(gdb) b EigenStepper.ipp:128\r\nBreakpoint 2 at 0x7fffefa2522f: EigenStepper.ipp:128. (10 locations)\r\n(gdb) c\r\n```\r\n\r\nThe 10 locations are probably different template instantiations. This one breaks quite quickly, and shows the full (enormous) class name:\r\n```\r\nBreakpoint 2, Acts::EigenStepper<Acts::StepperExtensionList<Acts::detail::GenericDefaultExtension<double> >, Acts::detail::VoidAuctioneer>::step<Acts::Propagator<Acts::EigenStepper<>, Acts::Navigator>::State<Acts::PropagatorOptions<Acts::ActionList<ActsFatras::detail::SimulationActor<std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, ActsFatras::NoDecay, ActsFatras::InteractionList<ActsFatras::ContinuousProcess<ActsFatras::detail::ScatteringImpl<ActsFatras::detail::Highland>, ActsFatras::ChargedSelector, ActsFatras::EveryParticle, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheBloch, ActsFatras::ChargedSelector, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheHeitler, ActsFatras::AbsPdgSelector<(Acts::PdgParticle)11>, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::Min<ActsFatras::Casts::P> > >, (anonymous namespace)::HitSurfaceSelector> >, Acts::AbortList<ActsFatras::detail::SimulationActor<std::mersenne_twister_engine<long unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, ActsFatras::NoDecay, ActsFatras::InteractionList<ActsFatras::ContinuousProcess<ActsFatras::detail::ScatteringImpl<ActsFatras::detail::Highland>, ActsFatras::ChargedSelector, ActsFatras::EveryParticle, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheBloch, ActsFatras::ChargedSelector, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheHeitler, ActsFatras::AbsPdgSelector<(Acts::PdgParticle)11>, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::Min<ActsFatras::Casts::P> > >, (anonymous namespace)::HitSurfaceSelector>::ParticleNotAlive, Acts::EndOfWorldReached, Acts::PathLimitReached> > > >(Acts::Propagator<Acts::EigenStepper<Acts::StepperExtensionList<Acts::detail::GenericDefaultExtension<double> >, Acts::detail::VoidAuctioneer>, Acts::Navigator>::State<Acts::PropagatorOptions<Acts::ActionList<ActsFatras::detail::SimulationActor<std::mersenne_twister_engine<unsigned long, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, ActsFatras::NoDecay, ActsFatras::InteractionList<ActsFatras::ContinuousProcess<ActsFatras::detail::ScatteringImpl<ActsFatras::detail::Highland>, ActsFatras::ChargedSelector, ActsFatras::EveryParticle, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheBloch, ActsFatras::ChargedSelector, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheHeitler, ActsFatras::AbsPdgSelector<(Acts::PdgParticle)11>, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::Min<ActsFatras::Casts::P> > >, (anonymous namespace)::HitSurfaceSelector> >, Acts::AbortList<ActsFatras::detail::SimulationActor<std::mersenne_twister_engine<unsigned long, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>, ActsFatras::NoDecay, ActsFatras::InteractionList<ActsFatras::ContinuousProcess<ActsFatras::detail::ScatteringImpl<ActsFatras::detail::Highland>, ActsFatras::ChargedSelector, ActsFatras::EveryParticle, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheBloch, ActsFatras::ChargedSelector, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::EveryParticle>, ActsFatras::ContinuousProcess<ActsFatras::BetheHeitler, ActsFatras::AbsPdgSelector<(Acts::PdgParticle)11>, ActsFatras::Min<ActsFatras::Casts::P>, ActsFatras::Min<ActsFatras::Casts::P> > >, (anonymous namespace)::HitSurfaceSelector>::ParticleNotAlive, Acts::EndOfWorldReached, Acts::PathLimitReached> > > &) const (this=0x7f6ae8, state=...) at Core/include/Acts/Propagator/EigenStepper.ipp:197\r\n197       while (true) {\r\n```\r\nIn this case, it breaks at a different line from that selected, presumably due to inlining the `tryRungeKuttaStep` lambda. If this is a problem, it might help to compile with `-DCMAKE_BUILD_TYPE=Debug`, rather than the default `RelWithDebInfo`.\r\n\r\nYou can use `where` to see the full stack trace and all the other `gdb` commands.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1463",
    "updated_at": "2022-09-24T09:12:40+00:00",
    "created_at": "2022-08-23T15:55:32+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Fatras: Bethe-Heitler calculation wrong?",
    "user": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1437",
    "number": 1437,
    "assignee": null,
    "body": "While writing the documentation for Fatras, I've added some basic UnitTests to #1402 in order to create and show the principles of the particle interaction mode.\r\n\r\nThis is the test:\r\n```c++\r\n  for (auto i : loop){\r\n     ActsFatras::Particle after = before;\r\n     const auto outgoing = process(gen, materialSlab, after);\r\n     fileOutput( before.energy()-after.energy() );\r\n  }\r\n```\r\n\r\nWith `typeid(process) == BetheBloch` this gives a Landau distribution as expected:\r\n\r\n![Unknown](https://user-images.githubusercontent.com/26623879/184827680-735725d1-d32f-4a1f-ad79-f7769463844a.png)\r\n\r\nWhile with `typeid(process) ==BetheHetiler` It looks to me as if the distribution shows what you would expect from `after.energy()/before.energy()`:\r\n\r\n![Unknown-1](https://user-images.githubusercontent.com/26623879/184828017-daca52a9-6fc0-4669-976b-ef0066166b11.png)\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1437",
    "updated_at": "2022-09-20T21:44:48+00:00",
    "created_at": "2022-08-16T07:57:15+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: Contribution guidelines",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1423",
    "number": 1423,
    "assignee": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "body": "- [ ] `CONTRIBUTING.rst` remove style guide part + link to docs style guide\r\n- #1525\r\n  - [x] How to run the formatting (@AJPfleger)\r\n  - [x] How to build the documentation (@paulgessinger)\r\n  - [x] What is clang-tidy (@paulgessinger)\r\n  - [x] What is physmon (@paulgessinger)\r\n  - [x] What are root file hash checks (@paulgessinger)\r\n  - [x] MyST markdown cheat sheet (@benjaminhuth)",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1423",
    "updated_at": "2022-10-19T02:39:02+00:00",
    "created_at": "2022-08-11T14:24:51+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: How-to (core)",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1422",
    "number": 1422,
    "assignee": null,
    "body": "- [ ] How to run the material mapping and validation in an experiment (not specific to the examples framework!)\r\n- [ ] How to produce a digitizer config for your experiment\r\n- [ ] How to produce a geometry selection config for SP making for your experiment (@benjaminhuth)",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1422",
    "updated_at": "2022-11-23T00:10:18+00:00",
    "created_at": "2022-08-11T14:24:48+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: Plugins",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1421",
    "number": 1421,
    "assignee": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "body": "- [ ] #1397 (@niermann999)\r\n- [ ] CUDA (remove)\r\n- [ ] DD4hep (@paulgessinger)\r\n- [ ] ExaTrkX (@benjaminhuth)\r\n- [ ] Identification (remove)\r\n- [ ] JSON (@niermann999)\r\n- [ ] Legacy (?)\r\n- [ ] ONNX (Rename)\r\n- [ ] SYCL (remove)\r\n- [ ] TGeo (@niermann999)",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1421",
    "updated_at": "2022-10-22T18:34:51+00:00",
    "created_at": "2022-08-11T14:13:36+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: Examples",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1420",
    "number": 1420,
    "assignee": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "body": "- [ ] Examples framework + infrastructure (@paulgessinger)\r\n  - [ ] List examples workflows, with minimal description \r\n- [ ] Python bindings (@paulgessinger, @andiwand)\r\n- [x] #1401 (@andiwand)\r\n- [ ] Howto: tgeo building in examples (@niermann999)\r\n- [ ] Howto: material mapping in the examples context (@asalzburger)\r\n- [ ] Howto: digitizer config in examples (@niermann999)\r\n- [ ] Howto: geo selection in examples (@benjaminhuth)\r\n- [ ] Alignment protoype\r\n- [ ] Analysis helpers / scripts (how to run, what the outputs mean, screenshots?) (@AJPfleger)",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1420",
    "updated_at": "2022-11-23T00:10:19+00:00",
    "created_at": "2022-08-11T14:13:08+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: FATRAS",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1419",
    "number": 1419,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "- [ ] #1402 (@asalzburger)\r\n- [ ] G4 + FATRAS",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1419",
    "updated_at": "2022-10-22T18:34:50+00:00",
    "created_at": "2022-08-11T14:09:45+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Documentation update: Core",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Component - Documentation"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1418",
    "number": 1418,
    "assignee": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "body": "- [ ] Algebra & units\r\n- [ ] Event Data\r\n  - [ ] Add MultiTrajectory documentation (@paulgessinger)\r\n- #1395 (@asalzburger)\r\n- #1518 (@paulgessinger)\r\n- [ ] Material: what is our material model, describe concept, no howto on mapping etc\r\n- #1396 (@benjaminhuth)\r\n- #1476 (@LuisFelipeCoelho)\r\n  - #1340 (@robertlangenberg)\r\n- #1398 (@AJPfleger)\r\n  - [ ] Kalman Filter \r\n  - #1403 (@benjaminhuth)\r\n  - [ ] GX2F (@AJPfleger)\r\n- [ ]  Track finding (@paulgessinger)\r\n  - [ ] CKF\r\n  - [ ] #1517 (@benjaminhuth)\r\n- [ ] Vertexing (@andiwand)\r\n- [ ] Utilities (@paulgessinger)\r\n  - [ ] Grid and axis\r\n- [ ] Logging (log thresholds) (@paulgessinger)\r\n  - #1338 \r\n  - #1520",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1418",
    "updated_at": "2022-11-23T00:10:22+00:00",
    "created_at": "2022-08-11T14:04:52+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Full chain vertexing with AMVF",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1406",
    "number": 1406,
    "assignee": null,
    "body": "> Looks ok, let's go with IVF first and look into AMVF. Do you know if AMVF runs into errors in the current status?\r\n\r\nAMVF will produce an error in the current scenario. I guess it is because we loose one of the muons and then fail to fit the vertex. with 4 muons AMVF works but IVF even works with 2 but I am not sure why\r\n\r\n_Originally posted by @andiwand in https://github.com/acts-project/acts/issues/1299#issuecomment-1206199044_",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1406",
    "updated_at": "2022-10-01T11:10:08+00:00",
    "created_at": "2022-08-09T08:19:51+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Ambiguous perigees with low momentum",
    "user": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1386",
    "number": 1386,
    "assignee": null,
    "body": "While looking into https://github.com/acts-project/acts/pull/1354 I noticed that a track can have more than one perigee if the momentum is small enough to allow a circular track inside the detector.\r\n\r\nAlso if we propagate from a perigee into the detector we limit the path length to `helix/2`. So if not stopped we will end up with a particle state that fulfills the current perigee condition. This is what happens in https://github.com/acts-project/acts/pull/1354 with ?`p=0.1` and `q=1`.\r\n\r\nSince this sounds like a very rare case (and might not be likely/possible in a real detector?) I wondered if we want to deal with this or if we accept this as a limitation?\r\n\r\ncc @paulgessinger @asalzburger ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1386",
    "updated_at": "2022-09-20T21:45:31+00:00",
    "created_at": "2022-08-05T15:12:08+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Vertexing produces unexpectedly poor efficiency",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1362",
    "number": 1362,
    "assignee": null,
    "body": null,
    "url": "https://api.github.com/repos/acts-project/acts/issues/1362",
    "updated_at": "2022-09-20T21:45:49+00:00",
    "created_at": "2022-08-02T15:19:49+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Vertexing produces vertex candidates that are unreasonable",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1361",
    "number": 1361,
    "assignee": null,
    "body": "Edit @andiwand:\r\n\r\nAMVF without beam spot constraints seems to seed reasonable vertices with `x=0`, `y=0` and `z` close to `0` with a toy example of 2 muons. The problem I am seeing is that the kalman update [here](https://github.com/acts-project/acts/blob/main/Core/include/Acts/Vertexing/KalmanVertexUpdater.ipp#L99) will blow up the vertex position for some reason.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1361",
    "updated_at": "2022-10-22T18:34:49+00:00",
    "created_at": "2022-08-02T15:17:19+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Vertexing produces propagation errors",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Impact - Critical"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1345",
    "number": 1345,
    "assignee": null,
    "body": "During propagation to the vertex position, the propagation seems to get stuck.\r\n\r\n@andiwand has observed \r\n\r\n```\r\nStep failed with EigenStepperError:3: Step size adjustment exceeds maximum trials\r\n```\r\n\r\nwhich seems to be the accurracy correction flip flopping between two step sizes and failing to converge.\r\n\r\nIn addition to this error, ATLAS observes an error\r\n\r\n```\r\n18:35:26 18:35:26    HelTrkLinPro   WARNING   Pixel::Barrel | No further navigation action, proceed to target. This is very likely an error\r\n```\r\n\r\nin minbias events with low-pt in reprocessing ([JIRA ticket](https://its.cern.ch/jira/browse/ATLASRECTS-7148))",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1345",
    "updated_at": "2022-09-20T21:45:31+00:00",
    "created_at": "2022-07-26T15:07:21+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "add monitoring for vertexing in physmon",
    "user": {
      "login": "andiwand",
      "html_url": "https://github.com/andiwand"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Component - Examples"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1313",
    "number": 1313,
    "assignee": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "body": "we have vertexing as part of the odd full chain now in [\u00b4full_chain_odd.py\u00b4](https://github.com/acts-project/acts/blob/main/Examples/Scripts/Python/full_chain_odd.py) but no monitoring in [`physmon.py`](https://github.com/acts-project/acts/blob/main/CI/physmon/physmon.py)\r\n\r\nsee discussion here https://github.com/acts-project/acts/pull/1299",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1313",
    "updated_at": "2022-09-20T21:45:31+00:00",
    "created_at": "2022-07-11T09:29:07+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Reproducibility test using hash checks for non-linear KF",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1246",
    "number": 1246,
    "assignee": {
      "login": "XiaocongAi",
      "html_url": "https://github.com/XiaocongAi"
    },
    "body": "Briefly discussed this with @XiaocongAi: we should really lock down the non-linear corrections for the KF (#1233). This would ideally go into a python based test (maybe `truth_test_kalman.py` after #1232 is merged).\r\n\r\nUltimately, we should strive to have performance histogram comparisons for the residuals and pulls as well (which @andiwand is working on independently).",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1246",
    "updated_at": "2022-06-12T09:39:01+00:00",
    "created_at": "2022-05-09T07:51:40+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Magnetic Field Storage",
    "user": {
      "login": "osbornjd",
      "html_url": "https://github.com/osbornjd"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Feature"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1239",
    "number": 1239,
    "assignee": null,
    "body": "According to @asalzburger the magnetic field is nominally stored in the `Grid` class as a vector of doubles. It would be convenient to have this reworked as a vector of floats to reduce memory storage, given that (in my expectation, at least) magnetic field mappings will never need the precision of doubles.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1239",
    "updated_at": "2022-06-12T09:39:03+00:00",
    "created_at": "2022-04-29T18:18:16+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Bug: Probable Issues in Bevelled Cylinder Implementation",
    "user": {
      "login": "rahmans1",
      "html_url": "https://github.com/rahmans1"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1238",
    "number": 1238,
    "assignee": null,
    "body": "Relevant Issue: [1104](https://github.com/acts-project/acts/pull/1104) , [1146](https://github.com/acts-project/acts/issues/1146)\r\n\r\nThe issue is a summary of the probable problems with PR 1104 which implemented the bevelled cylinder surfaces in ACTS. [Slide 8, 9 here.](https://indico.bnl.gov/event/15458/contributions/62426/attachments/40571/67801/ACTS%20integration%20for%20B0%20tracker.pdf) \r\n\r\nIn [Acts::CylinderBounds::inside](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L40):\r\n1) The vector lposition seems to represent a location in the (R*phi, z) coordinates. This would make sense as a cylindrical surface would unwrap to be a rectangle with the same height as the cylinder but a width = 2pi*R. The calculation of the [localx](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L56)  variable and its use [localx](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L62) does not seem to reflect that. The factor of radial location R is missing.\r\n2) The first check in Acts::CylinderBounds::inside is performed on a [shifted lposition variable which normalizes out the radial factor]( https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L24). This check does not check for any bevels and seems like it would return true even without checking edge cases for a bevelled cylinder. So, the rest of the code block never gets executed. \r\n3) The block of code following [line 62](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L62) and line 65, seems to assume that the boundary of a unwrapped bevelled cylinder is a polygon. This wouldn't be the exact case if one takes into account the evolution of the slope along the boundary surfaces. \r\n![BevelledCylinder](https://user-images.githubusercontent.com/7409132/165825648-92629888-f8d8-4d77-b390-0bf524aee049.JPG)\r\n\r\nIn [Acts::CylinderBounds::inside3D](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L89):\r\n1) The inside3D function has two checks: a fast check that does bevelled cylinders but with full azimuthal range (closed surface) and a slow check that can handle phi segments but doesn't check for bevels. Does the fast check need to be updated to check for finite azimuthal range or is the check here sufficient?\r\n2) In the fast check, should this be [bevelMaxZ](https://github.com/acts-project/acts/blob/main/Core/src/Surfaces/CylinderBounds.cpp#L109)? Seems like a typo. \r\n3) In the fast check, it seems to again only check a projection on the yz-plane and may not be sufficient for a bevelled cylinder with finite azimuthal range. \r\n\r\n\r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1238",
    "updated_at": "2023-05-09T02:48:16+00:00",
    "created_at": "2022-04-28T19:38:00+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Bug: fatras different particle final states between python and executable",
    "user": {
      "login": "CouthuresJeremy",
      "html_url": "https://github.com/CouthuresJeremy"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1221",
    "number": 1221,
    "assignee": null,
    "body": "Hi,\r\nI saw a small difference in the particle final states between python and executable when running fatras.\r\n\r\nHere are the args that I used for the executable:\r\n```\r\nActsExampleFatrasGeneric \\\r\n  --events=1 \\\r\n  --rnd-seed=42 \\\r\n  --gen-eta=-4:4 \\\r\n  --gen-mom-gev=1:5 \\\r\n  --gen-mom-transverse \\\r\n  --gen-pdg=13 \\\r\n  --gen-randomize-charge \\\r\n  --bf-constant-tesla=0:0:2 \\\r\n  --output-dir=fatras \\\r\n  --output-csv \\\r\n  --loglevel=0\r\n```\r\n\r\nHere is the python file that I used:\r\n```\r\n#!/usr/bin/env python3\r\nimport pathlib, acts, acts.examples\r\n\r\nu = acts.UnitConstants\r\noutputDir = pathlib.Path.cwd()\r\n\r\ngdc = acts.examples.GenericDetector.Config()\r\ndetector = acts.examples.GenericDetector()\r\ntrackingGeometry, contextDecorators = detector.finalize(gdc, None)\r\n\r\nfield = acts.ConstantBField(acts.Vector3(0.0, 0.0, 2.0 * u.T))\r\nrnd = acts.examples.RandomNumbers(seed=42)\r\n\r\nfrom particle_gun import addParticleGun, MomentumConfig, EtaConfig, ParticleConfig\r\nfrom fatras import addFatras\r\n\r\ns = acts.examples.Sequencer(events=1, numThreads=-1)\r\ns.config.logLevel = acts.logging.VERBOSE\r\ns = addParticleGun(\r\n    s,\r\n    momentumConfig=MomentumConfig(1.0 * u.GeV, 5.0 * u.GeV, True),\r\n    etaConfig=EtaConfig(-4.0, 4.0),\r\n    particleConfig=ParticleConfig(1, acts.PdgParticle.eMuon, True),\r\n    rnd=rnd,\r\n)\r\n\r\ns = addFatras(\r\n    s,\r\n    trackingGeometry,\r\n    field,\r\n    outputDirCsv = outputDir / \"csv\",\r\n    rnd=rnd,\r\n)\r\ns.run()\r\n```\r\n\r\nevent000000000-particles_final.csv:\r\nExecutable:\r\n```\r\nparticle_id,particle_type,process,vx,vy,vz,vt,px,py,pz,m,q\r\n4503599644147712,13,0,-715.953308,738.44519,84.6097717,3.44791126,-2.75245881,2.39595652,0.301638216,0.105658367,-1\r\n```\r\nPython:\r\n```\r\nparticle_id,particle_type,process,vx,vy,vz,vt,px,py,pz,m,q\r\n4503599644147712,13,0,-715.985718,738.413757,85.0053482,3.44800162,-2.76315808,2.40676093,0.30248946,0.105658367,-1\r\n```\r\n\r\nFirst difference that I saw in the logs:\r\nExecutable:\r\n```\r\n16:56:57    Simulation     VERBOSE   BeamPipe::Barrel | Try to find boundaries, \r\nwe are at: -12.0544  14.6864  1.56843, dir: -0.633436  0.769426 0.0821147\r\n```\r\nPython:\r\n```\r\n16:56:58    Simulation     VERBOSE   BeamPipe::Barrel | Try to find boundaries, \r\nwe are at: -12.0544  14.6864  1.56843, dir: -0.633487  0.769367 0.0822692\r\n```\r\n\r\nDoes anyone have an idea of where it might come from?",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1221",
    "updated_at": "2022-05-01T18:57:10+00:00",
    "created_at": "2022-03-31T15:39:38+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "ci: Coverage job is broken with gcovr >= 5.1",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1211",
    "number": 1211,
    "assignee": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "body": "See #1210 ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1211",
    "updated_at": "2022-04-29T16:57:10+00:00",
    "created_at": "2022-03-28T17:26:15+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Cut tube segment dd4hep conversion tests ",
    "user": {
      "login": "rahmans1",
      "html_url": "https://github.com/rahmans1"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Needs Decision"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1146",
    "number": 1146,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "Proposed labels: Improvement, Needs Discussion\r\n\r\nProposed next steps on cut tube support that touch the Acts code base:\r\n\r\n1) Extend TGeoTubeConversionTests.cpp with a TGeoCtub (like done [here](https://github.com/acts-project/acts/blob/main/Tests/UnitTests/Plugins/TGeo/TGeoTubeConversionTests.cpp#L64) for TGeoTubeSeg), this test will fail until support below is added,\r\n\r\n    a) Extend Acts::TGeoSurfaceConverter::cylinderComponents (like done [here](https://github.com/acts-project/acts/blob/main/Plugins/TGeo/src/TGeoSurfaceConverter.cpp#L88) \r\n        for TGeoTubeSeg) to support TGeoCtub (TGeoCtub inherits TGeoTubeSeg inherits TGeoTube, so \r\n        the same strategy taken there simply extends), and similarly extends \r\n       Acts::TGeoSurfaceConverter::discComponents  (like [here](https://github.com/acts-project/acts/blob/main/Plugins/TGeo/src/TGeoSurfaceConverter.cpp#L240))\r\n   The test above should now succeed.\r\n\r\n2) extend Acts::DD4hepLayerBuilder::endcapLayers (like done [here](https://github.com/acts-project/acts/blob/main/Plugins/DD4hep/src/DD4hepLayerBuilder.cpp#L90) for TGeoTubeSeg) and Acts::DD4hepLayerBuilder::centralLayers (like done [here](https://github.com/acts-project/acts/blob/main/Plugins/DD4hep/src/DD4hepLayerBuilder.cpp#L238) for TGeoTubeSeg) to support TGeoCtub.\r\n \r\n3) Are there any DD4hep unit tests that should be updated to test?\r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1146",
    "updated_at": "2022-05-25T23:03:12+00:00",
    "created_at": "2022-02-02T18:16:24+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Bug: issue on first build after DD4hep update on system with globaly installed acts",
    "user": {
      "login": "gagnonlg",
      "html_url": "https://github.com/gagnonlg"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Infrastructure"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Component - Examples"
      },
      {
        "name": "Component - Plugins"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1139",
    "number": 1139,
    "assignee": null,
    "body": "TLDR; I hit an odd issue after upgrading to DD4hep 1.19 on my system today.  I think it's an issue with the DD4hep's cmake setup, but I'm documenting this here until I have time to look into this again.\r\n\r\nLonger summary: \r\n\r\nBasically, the build fails with:\r\n\r\n```\r\n[ 26%] Generating libActsExamplesDetectorDD4hep.components\r\nERROR: failed to load libActsExamplesDetectorDD4hep.so: libDDCore.so.1.16: cannot open shared object file: No such file or directory\r\n```\r\nThe odd part is that libDDCore.so.1.16 is not present at all on this system. However, as I'm building, there's a previous acts version installed in /usr which is linked against it:\r\n```\r\n $ ldd /usr/lib/libActsExamplesDetectorDD4hep.so | grep DD\r\n\tlibActsPluginDD4hep.so => /usr/lib/../lib/libActsPluginDD4hep.so (0x00007f1dfd1b5000)\r\n\tlibDDCore.so.1.16 => not found\r\n\tlibDDCore.so.1.16 => not found\r\n```\r\nBuilding with VERBOSE=1:\r\n```\r\n[ 26%] Generating libActsExamplesDetectorDD4hep.components\r\ncd /home/glg/ACTS/packaging/acts-main/src/acts/build/Examples/Detectors/DD4hepDetector && LD_LIBRARY_PATH=/home/glg/ACTS/packaging/acts-main/src/acts/build/Examples/Detectors/DD4hepDetector:/usr/lib: /usr/bin/listcomponents_dd4hep -o libActsExamplesDetectorDD4hep.components libActsExamplesDetectorDD4hep.so\r\nERROR: failed to load libActsExamplesDetectorDD4hep.so: libDDCore.so.1.16: cannot open shared object file: No such file or directory\r\n```\r\n\r\nBut :\r\n```\r\n$ ldd /home/glg/ACTS/packaging/acts-main/src/acts/build/Examples/Detectors/DD4hepDetector/libActsExamplesDetectorDD4hep.so | grep DD\r\n\tlibActsPluginDD4hep.so => /home/glg/ACTS/packaging/acts-main/src/acts/build/lib/libActsPluginDD4hep.so (0x00007f0bdd889000)\r\n\tlibDDCore.so.1.19 => /usr/lib/libDDCore.so.1.19 (0x00007f0bdd1cf000)\r\n\tlibDDParsers.so.1.19 => /usr/lib/libDDParsers.so.1.19 (0x00007f0bdbb06000)\r\n```\r\n\r\nSo, for some reason, the `listcomponents_dd4hep` ignores the version in the local directory. If I add $PWD/ in front of the .so path, it works as expected. \r\n\r\nEither we're configuring something wrongly, or there's an issue with DD4hep cmake's setup. I propose to keep this open until I can figure that part out. \r\n\r\nEasy workaround: either uninstall the global acts while building the new one, or patch the build script to add the $PWD.\r\n\r\n\r\n\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1139",
    "updated_at": "2022-02-22T00:22:28+00:00",
    "created_at": "2022-01-19T22:50:32+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Add example (+test) for vertex fitting with constraints",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1100",
    "number": 1100,
    "assignee": null,
    "body": "As discovered by @mesmerisa, the vertex fitting algorithm was supplying constraints in the wrong format. This apparently was never run in any automated tests.\r\n\r\nWe should add an example that runs in the configuration where this fails, so we can add a test for this.\r\n\r\n/cc @asalzburger ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1100",
    "updated_at": "2022-01-07T07:16:46+00:00",
    "created_at": "2021-12-07T16:10:33+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Vertexing issues observed in python vertexing example",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1091",
    "number": 1091,
    "assignee": null,
    "body": "### TruthVertex Finder + VertexFitterAlgorithm with reconstructed input tracks crashes with a SEGFAULT\r\nThis combination doesn't make too much sense I suppose, but right now it gives a hard SEGFAULT.\r\nI think this should work on a technical level. My understanding is that the Truth particles are used for the vertex finding, and then the vertex fit runs on reconstructed tracks. This seems to be fine if the tracks are reconstructed in the same job, but not if the tracks are read back in from the summary. My guess is that there's some link between tracks and truth particles that the fitter uses and the reader doesn't recover correctly.\r\n\r\n### Vertex performance writer warnings\r\nThe vertex performance writer (I think) complains with a WARNING if the number of reconstructed tracks and the number of truth particles doesn't match. I guess this case is expected, since tracking efficiency is not 100%? Should this be a loud WARNING? Right now I have to work around that in the python based tests because in the CI, a WARNING log message will throw an exception\r\n\r\n### AMVF gives error for empty input\r\nThe AMVF gives a `VertexingError` when the input collection is empty. I guess it makes sense that the vertexing can't run in this case, but the question is if that should be a hard error, or more of a noop: not enough tracks => no vertices. Otherwise, I'm guessing the vertexing algorithm around the AMVF in this case should check if the input is empty and not call the AMVF at all in this case.\r\n\r\nThoughts / input / discussion is welcome!\r\n\r\n/cc @Corentin-Allaire @robertlangenberg @asalzburger @baschlag ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1091",
    "updated_at": "2022-08-11T21:07:59+00:00",
    "created_at": "2021-11-30T16:46:30+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Improvement: Estimate track parameters from seed at perigee surface",
    "user": {
      "login": "XiaocongAi",
      "html_url": "https://github.com/XiaocongAi"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/1036",
    "number": 1036,
    "assignee": null,
    "body": "Currently, the `estimateTrackParamsFromSeed` estimate the track parameters at the bottom space point for a seed. However, it's better to do the estimation at the beam line, say a perigee surface is specified as the reference surface of the estimated track parameters. \r\n\r\nThis requires some adaption of the calculation in this method [here](https://github.com/acts-project/acts/blob/main/Core/include/Acts/Seeding/EstimateTrackParamsFromSeed.hpp#L156).",
    "url": "https://api.github.com/repos/acts-project/acts/issues/1036",
    "updated_at": "2021-11-10T01:03:00+00:00",
    "created_at": "2021-10-10T19:35:01+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Should seed finding tools have a higher-level interface?",
    "user": {
      "login": "stephenswat",
      "html_url": "https://github.com/stephenswat"
    },
    "labels": [
      {
        "name": "Component - Core"
      },
      {
        "name": "Improvement"
      },
      {
        "name": "Needs Decision"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/988",
    "number": 988,
    "assignee": {
      "login": "stephenswat",
      "html_url": "https://github.com/stephenswat"
    },
    "body": "The seed finding interface (see [Seedfinder.hpp](https://github.com/acts-project/acts/blob/main/Core/include/Acts/Seeding/Seedfinder.hpp)) is currently defined as a single method, which is given as:\r\n\r\n```cpp\r\ntemplate <template <typename...> typename container_t, typename sp_range_t>\r\nvoid createSeedsForGroup(\r\n    State& state,\r\n    std::back_insert_iterator<container_t<Seed<external_spacepoint_t>>> outIt,\r\n    sp_range_t bottomSPs, sp_range_t middleSPs, sp_range_t topSPs) const;\r\n```\r\n\r\nTo me, this seems like a sub-optimal way to interface with the seed finding code. I say that because this interface seems to follow the binning model, where space points are divided into bottom, middle, and top candidates. As far as I can tell the reason for this is so you can call this method on adjacent bins for performance gains.\r\n\r\nHowever, I feel like this interface makes it harder to implement seeding algorithms that do not use binning. For binning-less algorithms, this sort of forces you to put your data in a mold that doesn't really fit it. On the other hand I do understand why this design is the way it is: it allows us to separate the concerns of the binning code and the seed finding code, and I think that separation is useful to preserve as well.\r\n\r\nMy goal in creating this issue to start a little bit of a discussion on how the seeding interface should look. On the one hand, it would be cool (I think) to have different seeding implementations unified under a single interface so they can be easily used and tested. On the other hand, like I mentioned, there is value in the separation that exists right now.\r\n\r\nSo I think it might be a good idea to discuss this a little bit. Here are a few possible ideas on how we can move forward here:\r\n\r\n1. We could choose not to unify seeding interfaces at all. This would be the easiest solution in the short term, but it would make it much harder in the long term to switch out seeding algorithms, and it might also make it harder in the future to develop new seeding algorithms.\r\n2. We could use the current interface for any future seeding algorithms. This would work, because you can just dump all of your space points in one of the three space point ranges and ignore the rest. However, that is obviously not a \"clean\" way to use the interface. However, it would minimize the effort required in the current code.\r\n3. We could add a higher level interface for the seed finder. As far as I am concerned, the minimal sensible API looks something like `std::vector<Seed> findSeeds(const std::vector<SpacePoint>) const`, possibly with some more abstract templated types. However, the problem with this would be that we could no longer rely on external space point binning. The binning would somehow have to be moved inside of the seeding algorithm. I'm not sure that's something we want to do.\r\n\r\nI'm not really sure what would be best here, and perhaps I'm overthinking this. Please feel free to share your opinions on the matter, I would be interested. :smile: ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/988",
    "updated_at": "2021-11-25T19:05:57+00:00",
    "created_at": "2021-09-13T20:01:36+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Debug Information in Acts Seeder",
    "user": {
      "login": "osbornjd",
      "html_url": "https://github.com/osbornjd"
    },
    "labels": [
      {
        "name": "Improvement"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/944",
    "number": 944,
    "assignee": {
      "login": "robertlangenberg",
      "html_url": "https://github.com/robertlangenberg"
    },
    "body": "The current implementation of the Acts seeding algorithm has no debug or verbose statements that could be turned on with the Acts logging functionality. It would be useful, for e.g. debugging when no seeds are found, if there were some options for understanding what the seeding algorithm is doing with the input that is provided to it, e.g. with some logging statements. \r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/944",
    "updated_at": "2021-10-21T16:11:17+00:00",
    "created_at": "2021-08-16T13:40:17+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "[bug] Off axis endcap with dd4hep plugin.",
    "user": {
      "login": "whit2333",
      "html_url": "https://github.com/whit2333"
    },
    "labels": [
      {
        "name": "Feature"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/942",
    "number": 942,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "Hello,\r\n\r\nI get the following error when the \"layer\" volume associated with an \"endcap\" is offset from the z axis:\r\n\r\n```\r\n17:16:40    D2A_L:B0Trac   VERBOSE    Received layers for positive volume -> creating disc layers\r\n17:16:40    D2A_L:B0Trac   VERBOSE    Disc layer has 12 senstive surfaces.\r\n17:16:40    D2A_LAC        VERBOSE   Creating a disk Layer:\r\n17:16:40    D2A_LAC        VERBOSE    - at Z position    = 5405.09\r\n17:16:40    D2A_LAC        VERBOSE    - from Z min/max   = 5401.27 / 5408.41\r\n17:16:40    D2A_LAC        VERBOSE    - with Z thickness = 9.99688\r\n17:16:40    D2A_LAC        VERBOSE      - incl envelope  = 1.17385 / 1.6762\r\n17:16:40    D2A_LAC        VERBOSE    - with R min/max   = 35 (-2.65614) / 150 (+137.582)\r\n17:16:40    D2A_LAC        VERBOSE    - with phi min/max = -3.14159 / 3.13982\r\n17:16:40    D2A_LAC        VERBOSE    - # of modules     = 12\r\n17:16:40    D2A_SAC        VERBOSE   Creating a SurfaceArray on a disc\r\n17:16:40    D2A_SAC        VERBOSE   Create equidistant binning Axis for binned SurfaceArray\r\n17:16:40    D2A_SAC        VERBOSE   \tBinningValue: 3\r\n17:16:40    D2A_SAC        VERBOSE   \t(binX = 0, binY = 1, binZ = 2, binR = 3, binPhi = 4, binRPhi = 5, binH = 6, binEta = 7)\r\n17:16:40    D2A_SAC        VERBOSE   \tNumber of bins: 6\r\n17:16:40    D2A_SAC        VERBOSE   \t(Min/Max) = (35/150)\r\n**************************************************** \r\n*  A runtime error has occured :                     \r\n*    vector::_M_range_check: __n (which is 7) >= this->size() (which is 6)\r\n*  the program will have to be terminated - sorry.   \r\n**************************************************** \r\n```\r\n\r\nI think we have hit the limit of the imposed barrel-endcap construction paradigm in the dd4hep plugin. The detector in this case is a far forward detector without a corresponding negative endcap. (Perhaps this endcap pair requirement should be the first to go in upgrading the dd4hep plugin?) So, I added a negative endcap to get the plugin functioning, but only the positive endcap is offset from the z axis.\r\n\r\nHere are the verbose outputs for two configurations:\r\n- Tracker layer centered on z axis: https://eicweb.phy.anl.gov/EIC/detectors/athena/-/jobs/222479\r\n- Tracker slightly offset from z axis: https://eicweb.phy.anl.gov/EIC/detectors/athena/-/jobs/222615\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/942",
    "updated_at": "2021-11-25T19:05:57+00:00",
    "created_at": "2021-08-12T17:23:55+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Some writers performs their writes in the destructor",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/881",
    "number": 881,
    "assignee": {
      "login": "Corentin-Allaire",
      "html_url": "https://github.com/Corentin-Allaire"
    },
    "body": "I understand why this is done, but it is likely not a great situation. I think writing should occur at the end of `Sequencer::run` and not when the sequencer is deallocated.\r\n\r\nI propose we either:\r\n\r\n1. Refactor `JsonMaterialWriter` (and consequently `MaterialMapping`) so that it can become an `IWriter`, that gets an `endRun` call when the event loop finishes.\r\n2. Add functionality to `Sequencer` such that algorithms also receive an `endRun` (or `finalize`?) call, so that `MaterialMapping` can call a write function on `JsonMaterialWriter`.\r\n\r\nWhat do you think @Corentin-Allaire?",
    "url": "https://api.github.com/repos/acts-project/acts/issues/881",
    "updated_at": "2022-08-11T21:08:00+00:00",
    "created_at": "2021-07-15T10:48:36+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Feat: Radial bounds in DD4hep plugin",
    "user": {
      "login": "whit2333",
      "html_url": "https://github.com/whit2333"
    },
    "labels": [
      {
        "name": "Feature"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/822",
    "number": 822,
    "assignee": null,
    "body": "See [this pull request](https://github.com/acts-project/acts/pull/820) for some background.\r\n\r\nFor some reason the positive endcap rmin is not set correctly. It should be 22 below but it is not set as the value but the envelope. \r\nI think it is related to the rather confusing use of [envelope and extent](https://github.com/acts-project/acts/blob/main/Core/include/Acts/Geometry/ProtoLayer.hpp#L31) in `Protolayer`.\r\n\r\nIf I [insert here](https://github.com/acts-project/acts/blob/main/Plugins/DD4hep/src/DD4hepLayerBuilder.cpp#L130) the following line:\r\n```\r\npl.extent.ranges[Acts::binR] = {rMin, rMax};\r\n``` \r\nThen things seem to work. \r\n\r\n```\r\n...\r\n01:06:45    D2A_LAC        VERBOSE   Creating a disk Layer:\r\n01:06:45    D2A_LAC        VERBOSE    - at Z position    = 176.5\r\n01:06:45    D2A_LAC        VERBOSE    - from Z min/max   = 176 / 177\r\n01:06:45    D2A_LAC        VERBOSE    - with Z thickness = 3\r\n01:06:45    D2A_LAC        VERBOSE      - incl envelope  = 1 / 1\r\n01:06:45    D2A_LAC        VERBOSE    - with R min/max   = 0 (-22) / 150 (+0)\r\n01:06:45    D2A_LAC        VERBOSE    - with phi min/max = -3.14159 / 3.14159\r\n01:06:45    D2A_LAC        VERBOSE    - # of modules     = 1\r\n01:06:45    D2A_SAC        VERBOSE   Creating a SurfaceArray on a disc\r\n01:06:45    D2A_SAC        VERBOSE   Create equidistant binning Axis for binned SurfaceArray\r\n01:06:45    D2A_SAC        VERBOSE      BinningValue: 3\r\n01:06:45    D2A_SAC        VERBOSE      (binX = 0, binY = 1, binZ = 2, binR = 3, binPhi = 4, binRPhi = 5, binH = 6, binEta = 7)\r\n01:06:45    D2A_SAC        VERBOSE      Number of bins: 1\r\n01:06:45    D2A_SAC        VERBOSE      (Min/Max) = (0/150)\r\n01:06:45    D2A_SAC        VERBOSE   Create equidistant binning Axis for binned SurfaceArray\r\n01:06:45    D2A_SAC        VERBOSE      BinningValue: 4\r\n01:06:45    D2A_SAC        VERBOSE      (binX = 0, binY = 1, binZ = 2, binR = 3, binPhi = 4, binRPhi = 5, binH = 6, binEta = 7)\r\n01:06:45    D2A_SAC        VERBOSE      Number of bins: 1\r\n01:06:45    D2A_SAC        VERBOSE      (Min/Max) = (-3.14159/3.14159)\r\n01:06:45    D2A_SAC        VERBOSE   - z-position of disk estimated as 176.5\r\n01:06:45    D2A_SAC        VERBOSE    -- with 1 surfaces.\r\n01:06:45    D2A_SAC        VERBOSE    -- with r x phi  = 1 x 1 = 1 bins.\r\n01:06:45    D2A_SAC        VERBOSE   Complete binning by filling closest neighbour surfaces into empty bins.\r\n01:06:45    D2A_SAC        VERBOSE          filled  : 0 (includes under/overflow)\r\n01:06:45    D2A_LAC        VERBOSE   Performing consistency check\r\n01:06:45    D2A_LAC        VERBOSE    - Checked 1 valid bins\r\n01:06:45    D2A_LAC        VERBOSE    -- All bins point to a surface\r\n01:06:45    D2A_LAC        VERBOSE    -- All sensitive surfaces are accessible through binning.\r\n\r\n****************************************************\r\n*  A runtime error has occured :\r\n*    RadialBounds: invalid radial setup\r\n*  the program will have to be terminated - sorry.\r\n****************************************************\r\n```\r\n\r\n",
    "url": "https://api.github.com/repos/acts-project/acts/issues/822",
    "updated_at": "2022-02-19T23:11:09+00:00",
    "created_at": "2021-06-01T06:26:50+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "BoundingBox tests fail on double precision",
    "user": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/752",
    "number": 752,
    "assignee": {
      "login": "paulgessinger",
      "html_url": "https://github.com/paulgessinger"
    },
    "body": "This error showed up in various cases when the floating point type was made globally configurable.\r\n\r\nSee #743, #156 \r\n\r\n/cc @asalzburger ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/752",
    "updated_at": "2021-11-04T09:57:08+00:00",
    "created_at": "2021-03-18T08:26:15+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "2D r-z Magnetic Field Map Improperly Read",
    "user": {
      "login": "osbornjd",
      "html_url": "https://github.com/osbornjd"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Impact - Minor"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/669",
    "number": 669,
    "assignee": {
      "login": "timadye",
      "html_url": "https://github.com/timadye"
    },
    "body": "When sPHENIX runs Acts with a constant 1.4 T magnetic field, we get a reasonably good momentum resolution; when trying to run the same thing with our field map, the tracking resolution degrades significantly. We use essentially the same code as [GeometryExampleBase](https://github.com/acts-project/acts/blob/4bd3a88df4f0926593ab1401c0041bb6123bf045/Examples/Run/Common/src/GeometryExampleBase.cpp#L31) lines 31-56 to build our geometry, with the following options:\r\n\r\n```\r\n -n1 -l0 --response-file sphenixResponse.response --mat-input-type file --mat-input-file materialFile --bf-map fieldMap.root --bf-name fieldmap --bf-lscalor 10 --bf-bscalor 9.3333e-05 --bf-rz true\r\n```\r\n\r\nThe below plots show some tests of 20 pi+ 20 pi- events.\r\n\r\nRunning with a constant 1.4T field gives us the nominal momentum/phi/eta resolution seen here:\r\n[constFieldEtaRes.pdf](https://github.com/acts-project/acts/files/5867707/constFieldEtaRes.pdf)\r\n[constFieldPhiRes.pdf](https://github.com/acts-project/acts/files/5867708/constFieldPhiRes.pdf)\r\n[constFieldpTRes.pdf](https://github.com/acts-project/acts/files/5867709/constFieldpTRes.pdf)\r\n\r\nNote that the arguments to run this are as follows:\r\n```\r\n -n1 -l0 --response-file sphenixResponse.response --mat-input-type file --mat-input-file materialFile -bf-values 0 0 1.5 --bf-bscalor 0.9333333\r\n```\r\n\r\nRunning with the same code but with the field map gives the degraded resolution seen here, which seems to be correlated with a phi offset that is charge dependent:\r\n[fieldMapEtaRes.pdf](https://github.com/acts-project/acts/files/5867711/fieldMapEtaRes.pdf)\r\n[fieldMapPhiRes.pdf](https://github.com/acts-project/acts/files/5867712/fieldMapPhiRes.pdf)\r\n[fieldMappTRes.pdf](https://github.com/acts-project/acts/files/5867713/fieldMappTRes.pdf)\r\n\r\nThe phi separation indicates that there must be some charge dependent way the field is being interpreted incorrectly, I suspect. Note that I tried flipping the field sign for Acts (this leads to many failed track fits) and flipping the charge of the tracks going into the fitter (Acts just sees the tracks as the opposite sign but is still able to fit them) so it seems like Acts is interpreting the direction of the field correctly.\r\n\r\nThe obvious first step to try to do this is to see if it can be reproduced in the Acts only framework, outside of sPHENIX using our response/material/field map files. These are attached here, in addition to the sPHENIX geometry in Root and GDML format:\r\n\r\n[sPHENIXGeometry.zip](https://github.com/acts-project/acts/files/5867795/sPHENIXGeometry.zip)\r\n\r\nI will see if I can do that with the default Acts executables.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/669",
    "updated_at": "2022-09-20T21:45:27+00:00",
    "created_at": "2021-01-25T16:13:03+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "fix: avoid double-static cast ",
    "user": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "labels": [
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/647",
    "number": 647,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "```suggestion\r\n  SimParticle fw(particleId, pdg,\r\n```\r\n\r\n_Originally posted by @FabianKlimpel in https://github.com/acts-project/acts/pull/638#discussion_r552395121_",
    "url": "https://api.github.com/repos/acts-project/acts/issues/647",
    "updated_at": "2021-10-21T16:11:16+00:00",
    "created_at": "2021-01-06T08:11:33+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Polyhedron surfaces tests are disabled",
    "user": {
      "login": "msmk0",
      "html_url": "https://github.com/msmk0"
    },
    "labels": [
      {
        "name": "Bug"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/454",
    "number": 454,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "The polyhedron surfaces tests in `Tests/UnitTests/Core/Surfaces/PolyhedronSurfacesTests.cpp` is not part of the CMake build. It should be re-added and updated to the latest changes in master.",
    "url": "https://api.github.com/repos/acts-project/acts/issues/454",
    "updated_at": "2021-11-04T09:57:11+00:00",
    "created_at": "2020-09-09T19:14:57+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  },
  {
    "title": "Tracking for TPC/DC without surfaces ",
    "user": {
      "login": "FabianKlimpel",
      "html_url": "https://github.com/FabianKlimpel"
    },
    "labels": [
      {
        "name": "Feature"
      },
      {
        "name": "Long Term"
      },
      {
        "name": "Stale"
      }
    ],
    "html_url": "https://github.com/acts-project/acts/issues/165",
    "number": 165,
    "assignee": {
      "login": "asalzburger",
      "html_url": "https://github.com/asalzburger"
    },
    "body": "Using a TPC/DC for measuring trajectories of charged particles is related to a setup in which the detecting element is located at a different position than the origin of the measurement. Hence the scenario is different to e.g. modules in a tracking detector. A current method for tracking in TPC/DC relies on the construction of surfaces for each measurement at its origin such that the Kalman filter formalism can be applied. However this involves the construction/destruction of many surfaces as well as coordinate transformations of the particle's parametrisation for each surface. In order to avoid this workload, further development is required to allow track reconstruction without surface dependencies for TPCs/DCs.\r\nThe therefore required steps can be grouped as:\r\n1. Measurement description\r\n- [x]  Free measurement description\r\nOur current measurements are restricted to a bound parametrisation. In order to handle a free measurement, appropriate adaptions are required\r\n- [ ]  Event storage\r\nAs the measurements need modifications the same would account to the storage of their collection.\r\n- [ ] Calibrator\r\nA calibrator for the measurements is required that locates the measurements including corrections like space charge distortions.\r\n2. Track extrapolation\r\n- [ ] Propagation needs to handle FreeParameters\r\nThe current Propagator and stepper classes can only handle bound parametrisation. This concept needs to be extended such that FreeParameters can be used.\r\n- [ ] Actor to stop propagation at right position\r\nAn actor is required to stop the propagation at a given position for applying the Kalman filter formalism.\r\n3. Track finding & fitting\r\n- [ ]  Kalman filter for free parameters\r\nThe current Kalman filter is able to handle only bound parametrisations and must be extended therefore by FreeParameters.\r\n- [ ]  TrackState\r\nThe current TrackState stores bound parametrisations and jacobians from bound to bound parametrisations. When FreeParameters should become possible, the dimensions are not fixed anymore.\r\n- [ ] CKF\r\nSimilar to the Kalman filter the CKF needs to learn when and how to act.\r\n\r\nAs these modifications strongly interfere with common tracking algorithms, the existing functionality should be preserved and moreover, as the TPC/DC can be considered as special cases, the modifications should be explicitly demanded by the user. The regular applications outside the TPC/DC should be as less affected from the changes as possible.  ",
    "url": "https://api.github.com/repos/acts-project/acts/issues/165",
    "updated_at": "2021-11-04T09:57:09+00:00",
    "created_at": "2020-04-30T08:25:19+00:00",
    "closed_at": null,
    "is_wip": false,
    "is_stale": true,
    "pull_request": null
  }
]